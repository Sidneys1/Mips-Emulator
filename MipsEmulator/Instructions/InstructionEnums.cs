namespace MipsEmulator.Instructions {
    internal enum Opcodes {
        Add = 0x0,
        Addu = Add,
        AddUnsigned = Addu,
        Sub = Add,
        Subu = Add,
        SubUnsigned = Subu,
        Addi = 0x8,
        AddImmediate = Addi,
        Addiu = 0x9,
        AddImmediateUnsiged = Addiu,
        Mult = Add,
        Multu = Add,
        MultUnsigned = Multu,
        Div = Add,
        Divu = Add,
        DivUnsigned = Divu,
        Lw = 0x23,
        LoadWord = Lw,
        Lh = 0x21,
        LoadHalfword = Lh,
        Lhu = 0x25,
        LoadHalfwordUnsigned = Lhu,
        Lb = 0x20,
        LoadByte = Lb,
        Lbu = 0x24,
        LoadByteUnsigned = Lbu,
        Sw = 0x2B,
        StoreWord = Sw,
        Sh = 0x29,
        StoreHalfword = Sh,
        Sb = 0x28,
        StoreByte = Sb,
        Lui = 0xF,
        LoadUpperImmediate = Lui,
        Mfhi = Add,
        MoveFromHi = Mfhi,
        Mflo = Add,
        MoveFromLo = Mflo,
        //MfcZ = Add,
        //MtcZ = Add,
        And = Add,
        Andi = 0xC,
        AndImmediate = Andi,
        Or = Add,
        Ori = 0xD,
        OrImmediate = Ori,
        Xor = Add,
        Nor = Add,
        Slt = Add,
        SetOnLessThan = Slt,
        Slti = 0xA,
        SetOnLessThanImmediat = Slti,
        Sll = Add,
        ShiftLeftLogicalImmediate = Sll,
        Srl = Add,
        ShiftRightLogicalImmediate = Srl,
        Sra = Add,
        ShiftRightArithmeticImmediate = Sra,
        Sllv = Add,
        ShiftLeftLogical = Sllv,
        Srlv = Add,
        ShiftRightLogical = Srlv,
        Srav = Add,
        ShiftRightArithmetic = Srav,
        Beq = 0x4,
        BranchOnEqual = Beq,
        Bne = 0x5,
        BranchOnNotEqual = Bne,
        J = 0x2,
        Jump = J,
        Jr = Add,
        JumpRegister = Jr,
        Jal = 0x3,
        JumpAndLink = 0x3,
        Syscall = Add
    }

    internal enum Functcodes {
        Add = 0x20,
        Addu = 0x21,
        AddUnsigned = Addu,
        Sub = 0x22,
        Subu = 0x23,
        SubUnsigned = Subu,
        Mult = 0x18,
        Multu = 0x19,
        MutlUnsigned = Multu,
        Div = 0x1A,
        Divu = 0x1B,
        DivUnsigned = Divu,
        Mfhi = 0x10,
        MoveFromHi = Mfhi,
        Mflo = 0x12,
        MoveFromLo = Mflo,
        And = 0x24,
        Or = 0x25,
        Xor = 0x26,
        Nor = 0x27,
        Slt = 0x2A,
        SetOnLessThan = Slt,
        Sll = 0x0,
        ShiftLeftLogicalImmediate = Sll,
        Srl = 0x2,
        ShiftRightLogicalImmediate = Srl,
        Sra = 0x3,
        ShirftRightArithmeticImmediate = Sra,
        Sllv = 0x4,
        ShiftLeftLogical = Sllv,
        Srlv = 0x6,
        ShiftRightLogical = Srlv,
        Srav = 0x7,
        ShiftRightArithmetic = Srav,
        Jr = 0x8,
        JumpRegister = Jr,
        Syscall = 0xC
    }
}